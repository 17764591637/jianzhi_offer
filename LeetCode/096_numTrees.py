'''
给定一个整数 n，求以 1 ... n 为节点组成的二叉搜索树有多少种？
定义：二叉查找树，（又：二叉搜索树，二叉排序树）它或者是一棵空树，或者是具有下列性质的二叉树： 
若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值； 
若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值； 
它的左、右子树也分别为二叉排序树。

示例:
输入: 3
输出: 5
解释:
给定 n = 3, 一共有 5 种不同结构的二叉搜索树:

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3
思路：
假设n个节点存在二叉排序树的个数是G(n)，令f(i)为以i为根的二叉搜索树的个数
即有:G(n) = f(1) + f(2) + f(3) + f(4) + ... + f(n)
n为根节点，当i为根节点时，其左子树节点个数为[1,2,3,...,i-1]，右子树节点个数为[i+1,i+2,...n]，
所以当i为根节点时，其左子树节点个数为i-1个，右子树节点为n-i，即f(i) = G(i-1)*G(n-i),
上面两式可得:G(n) = G(0)*G(n-1)+G(1)*G(n-2)+...+G(n-1)*G(0)

就跟斐波那契数列一样，把n=0 时赋为1，因为空树也算一种二叉搜索树，
那么n = 1时的情况可以看做是其左子树个数乘以右子树的个数，左右字数都是空树，所以1乘1还是1。
那么n = 2时，由于1和2都可以为根，分别算出来，再把它们加起来即可。

n = 2的情况可由下面式子算出：
dp[2] =  dp[0] * dp[1]　　　(1为根的情况)
　　　　+ dp[1] * dp[0]　　  (2为根的情况)

同理可写出 n = 3 的计算方法：
dp[3] =  dp[0] * dp[2]　　　(1为根的情况)
　　　　+ dp[1] * dp[1]　　  (2为根的情况)
 　　　  + dp[2] * dp[0]　　  (3为根的情况)
'''
class Solution:
    def numTrees(self, n):
        dp = [0] * (n+1)
        dp[0] = 1
        dp[1] = 1
        for i in range(2,n+1):
            for j in range(1,i+1):
                dp[i] += dp[j-1] * dp[i-j]

        return dp[n]

s = Solution()
res = s.numTrees(2)
print(res)